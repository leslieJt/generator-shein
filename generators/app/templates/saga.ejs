import { message } from 'antd';
import { call, put, takeLatest } from 'redux-saga/effects';
import * as types from './types';
<%_
  const regx = /\$\{(\w+)\}/;
  if (!template.interfaces) template.interfaces = [];
_%>
import {
  <% template.interfaces.forEach(i => { _%>
    <%= i.name %>Success, <%= i.name %>Failed,
  <%_ }) _%>
 } from './action';
import {
  <% template.interfaces.forEach(i => { _%>
    <%= i.name %>,
  <%_ }) _%>
 } from '../server';

<% template.interfaces.forEach(i => { %>
function* <%= i.name %>Saga(
  <% if (i.keys && i.keys.length || regx.test(i.url)) { _%>
    action
  <%_ } _%>
  ) {
  const data = yield call(<%= i.name %><% if (i.keys && i.keys.length) { _%> ,action.filter <%_ } else if (regx.test(i.url)) { _%>, action.<%= i.url.match(regx)[1] %><%_ } _%>);

  if (data.error) {
    message.error(data.error);
    yield put(<%= i.name %>Failed(data.error));
  } else {
    yield put(<%= i.name %>Success(data.data));
  }
}
<%_ }) _%>

function* mainSaga() {
  <% template.interfaces.forEach(i => { _%>
    yield takeLatest(types.<%= i.name %>, <%= i.name %>Saga);
  <%_ }) _%>
}

export default mainSaga;
